#name: Flutter CI
#
#on:
#  push:
#    branches:
#      - master
#
#
#jobs:
##  job1:
##    runs-on: ubuntu-latest
##    # Map a step output to a job output
##    outputs:
##      output1: ${{ steps.step1.outputs.test }}
##      output2: ${{ steps.step2.outputs.test }}
##    steps:
##      - id: step1
##        run: echo "test=hello" >> "$GITHUB_OUTPUT"
##      - id: step2
##        run: echo "test=world" >> "$GITHUB_OUTPUT"
##  job2:
##    runs-on: ubuntu-latest
##    needs: job1
##    steps:
##      - env:
##          OUTPUT1: ${{needs.job1.outputs.output1}}
##          OUTPUT2: ${{needs.job1.outputs.output2}}
##        run: echo "$OUTPUT1 $OUTPUT2"
#
#  version:
#    name: Create version number
#    runs-on: ubuntu-latest
#    outputs:
#      output1: ${{ steps.step1.outputs.test }}
#    steps:
#      - uses: actions/checkout@v1
#      - name: Install GitVersion
#        uses: gittools/actions/gitversion/setup@v0.9.7
#        with:
#          versionSpec: "5.x"
#      - name: gitversion
#        uses: gittools/actions/gitversion/execute@v0.9.7
#      - name: Create version.txt with nuGetVersion
#        run: echo ${{ steps.gitversion.outputs.GitVersion_FullSemVer  }} > version.txt
#      - name: Set version output
#        id: step1
#        run: echo "test=${{ env.GitVersion_FullSemVer }}" >> $GITHUB_OUTPUT
#      - name: Upload version.txt as an artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: version-artifact
#          path: version.txt
#        if: success()
#      - name: Handle error
#        if: failure()
#        run: |
#          echo "Workflow failed: ${{ job.status }}"
#
#
#  build:
#    name: Build APK and Create release
#    needs: version
#    runs-on: ubuntu-latest
#    steps:
#      - env:
#          OUTPUT1: ${{needs.version.outputs.output1}}
#        run: echo "$OUTPUT1"
#      - uses: actions/checkout@v1
#      - name: Download version.txt artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: version-artifact
#          path: downloaded
#      - name: Print version.txt content in build job
#        run: cat downloaded/version.txt
#      - name: Update version in YAML
#        run: |
#          current_version=$(grep -oP 'version: \K[0-9]+\.[0-9]+\.[0-9]+\+[0-9]+' pubspec.yaml)
#          IFS='+' read -ra version_parts <<< "$current_version"
#          new_version="${version_parts[0]}+$((${version_parts[1]}+1))"
#          sed -i "s/version: $current_version/version: ${{ needs.version.outputs.output1 }}/g" pubspec.yaml
#      - name: Print pubspec.yaml
#        run: cat pubspec.yaml
#      - uses: actions/setup-java@v1
#        with:
#          java-version: '16.x'
#
#      - uses: subosito/flutter-action@v2
#        with:
#          flutter-version: "3.7.0"
#          channel: 'stable'
#
#      - run: flutter pub get
#      - run: flutter build apk --release
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: release-apk
#          path: build/app/outputs/flutter-apk/app-release.apk
#
#      - name: Create a Release in GitHub
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: "build/app/outputs/apk/release/*.apk"
#          token: ${{ secrets.TOKEN_GITHUB }}
#          tag: ${{ needs.version.outputs.output1 }}
#          commit: ${{ github.sha }}


#name: Create master promotion pull request
#on:
#  push:
#    branches:
#      - nam
#jobs:
#  masterPromotion:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          ref: master
#      - name: Reset master branch
#        run: |
#          git fetch origin nam:nam
#          git reset --hard nam
#      - name: Create Pull Request
#        uses: peter-evans/create-pull-request@v3
#        with:
#          base: master
#          branch: nam
#        env:
#          GITHUB_TOKEN: ${{ secrets.TOKEN }}

#name: test a code
#
#on:
#  push:
#    branches:
#      - nam
#
#jobs:
#  analysis:
#    name: format
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.7.11'
#          channel: 'stable'
#          architecture: x64
#      - name: Check Code Format
#        run: dart format . --set-exit-if-changed
##      - name: Generate code
##        run: dart run build_runner build
#      - name: Analyze code
#        run: dart analyze .
#
#  widget-tests:
#    name: widget-tests
#    runs-on: ubuntu-latest
#    needs: analysis
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.7.11'
#          channel: 'stable'
#          architecture: x64
#      - name: Generate code
#        run: dart run build_runner build
#      - name: Run tests
#        run: flutter test